name: Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build:prod
      env:
        CI: false
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        # Create deployment package
        tar -czf frontend-deploy.tar.gz build/ src/ public/ package*.json *.config.js 2>/dev/null || tar -czf frontend-deploy.tar.gz build/ src/ public/ package*.json
        
        # Upload to EC2
        scp -i ~/.ssh/id_rsa frontend-deploy.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Deploy on EC2
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          # Create frontend directory
          sudo mkdir -p /home/ec2-user/hetasinglar-frontend
          sudo chown ec2-user:ec2-user /home/ec2-user/hetasinglar-frontend
          
          # Extract deployment package
          cd /home/ec2-user/hetasinglar-frontend
          tar -xzf /tmp/frontend-deploy.tar.gz
          rm /tmp/frontend-deploy.tar.gz
          
          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo dnf install -y nodejs
          fi
          
          # Install nginx if not present
          if ! command -v nginx &> /dev/null; then
            sudo dnf install -y nginx
          fi
          
          # Install dependencies
          npm install --production
          
          # Check if SSL certificate exists and create appropriate nginx configuration
          if [ -f /etc/letsencrypt/live/hetasinglar.se/fullchain.pem ]; then
            echo "SSL certificate found - configuring HTTPS"
            sudo tee /etc/nginx/conf.d/hetasinglar.conf > /dev/null << 'NGINX_EOF'
              # HTTP server - redirect to HTTPS
              server {
                listen 80;
                server_name hetasinglar.se www.hetasinglar.se;
                return 301 https://hetasinglar.se$request_uri;
              }

              # HTTPS server
              server {
                listen 443 ssl;
                server_name hetasinglar.se www.hetasinglar.se;

                # SSL Certificate configuration
                ssl_certificate /etc/letsencrypt/live/hetasinglar.se/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/hetasinglar.se/privkey.pem;

                # SSL configuration
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                ssl_session_timeout 1d;
                ssl_session_cache shared:SSL:50m;

                root /var/www/hetasinglar-frontend;
                index index.html;

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;

                # Gzip compression
                gzip on;
                gzip_vary on;
                gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript application/javascript application/json;

                # Handle React Router (SPA) with proper fallback
                location / {
                  try_files $uri $uri/ @spa_fallback;
                }

                location @spa_fallback {
                  try_files /index.html =404;
                }

                # Cache static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1d;
                }
              }
        NGINX_EOF
          else
            echo "No SSL certificate found - configuring HTTP only"
            sudo tee /etc/nginx/conf.d/hetasinglar.conf > /dev/null << 'NGINX_EOF'
              server {
                listen 80 default_server;
                server_name hetasinglar.se www.hetasinglar.se 13.48.194.178 _;

                root /var/www/hetasinglar-frontend;
                index index.html;

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;

                # Gzip compression
                gzip on;
                gzip_vary on;
                gzip_min_length 1024;
                gzip_types text/plain text/css text/xml text/javascript application/javascript application/json;

                # Handle React Router (SPA) with proper fallback
                location / {
                  try_files $uri $uri/ @spa_fallback;
                }

                location @spa_fallback {
                  try_files /index.html =404;
                }

                # Cache static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1d;
                }
              }
        NGINX_EOF
          fi
          
          # Copy build files to web directory
          sudo mkdir -p /var/www/hetasinglar-frontend
          sudo cp -r build/* /var/www/hetasinglar-frontend/
          sudo chown -R nginx:nginx /var/www/hetasinglar-frontend/
          sudo chmod -R 755 /var/www/hetasinglar-frontend/
          
          # Test and restart nginx
          sudo nginx -t
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          
          echo "✅ Frontend deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      run: |
        echo "🚀 Deployment completed!"
        
        # Check if SSL is configured
        if ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "test -f /etc/letsencrypt/live/hetasinglar.se/fullchain.pem"; then
          echo "Frontend should be available at: https://hetasinglar.se (SSL enabled)"
          # Check HTTPS
          sleep 10
          if curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.EC2_HOST }} | grep -q "200\|301\|302"; then
            echo "✅ HTTPS Site is responding!"
          else
            echo "⚠️ HTTPS Site may need a few moments to start"
          fi
        else
          echo "Frontend should be available at: http://hetasinglar.se (HTTP only)"
          # Check HTTP
          sleep 10
          if curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }} | grep -q "200\|301\|302"; then
            echo "✅ HTTP Site is responding!"
          else
            echo "⚠️ HTTP Site may need a few moments to start"
          fi
        fi